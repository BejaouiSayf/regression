View(data2)
ggplot(data2, aes(x=year, y=mean, color=factor(wheat_rice_both))) +
geom_point(aes(shape = factor(wheat_rice_both))) +
scale_colour_hue(l=50) +
stat_smooth(method = loess, se=FALSE) +
scale_y_continuous('Mean GBV / 1000 Women') +
scale_x_continuous('Year') +
theme(panel.background = element_rect(fill = 'white', colour = 'white'),
strip.background = element_rect(fill = 'white'))
ggplot(data2, aes(x=year, y=mean, color=factor(wheat_rice_both))) +
geom_line()+
#geom_point(aes(shape = factor(wheat_rice_both))) +
scale_colour_hue(l=50) +
#stat_smooth(method = loess, se=FALSE) +
scale_y_continuous('Mean GBV / 1000 Women') +
scale_x_continuous('Year') +
theme(panel.background = element_rect(fill = 'white', colour = 'white'),
strip.background = element_rect(fill = 'white'))
View(data2)
# folder to store data and plots
folder <- '/Users/majerus/Desktop/temp/'
# read in data
data <- read.csv(paste(folder, 'data_for_rich2.csv', sep =''))
attach(data)
View(data)
data2 <-
ddply(data, .(wheat_rice_both, year), summarize, mean = mean(normalized_violence, na.rm=TRUE))
data2.1 <- subset(data, !is.na(data$wheat_rice_both))
data2.1 <- ddply(data2.1, .(year), summarize, mean = mean(normalized_violence, na.rm=TRUE))
data2.1$wheat_rice_both <- 'All'
data2 <- rbind(data2, data2.1)
data2 <- subset(data2, data2$year<2009)
View(data2)
data2$wheat_rice_both <- ifelse(data2$wheat_rice_both == 1, 'Wheat', data2$wheat_rice_both)
View(data2)
data2$wheat_rice_both <- ifelse(data2$wheat_rice_both == 2, 'Rice', data2$wheat_rice_both)
View(data2)
data2$wheat_rice_both <- ifelse(is.na(data2$wheat_rice_both), 'Missing', data2$wheat_rice_both)
View(data2)
data2$wheat_rice_both <- ifelse(data2$wheat_rice_both == 3, 'Both', data2$wheat_rice_both)
View(data2)
ggplot(data2, aes(x=year, y=mean, color=factor(wheat_rice_both))) +
geom_line()+
scale_colour_hue(l=50) +
scale_y_continuous('Mean GBV / 1000 Women') +
scale_x_continuous('Year') +
theme(panel.background = element_rect(fill = 'white', colour = 'white'),
strip.background = element_rect(fill = 'white'))
ggplot(data2, aes(x=year, y=mean, color=factor(wheat_rice_both))) +
geom_line(size=2)+
scale_colour_hue(l=50) +
scale_y_continuous('Mean GBV / 1000 Women') +
scale_x_continuous('Year') +
theme(panel.background = element_rect(fill = 'white', colour = 'white'),
strip.background = element_rect(fill = 'white'))
# folder to store data and plots
folder <- '/Users/majerus/Desktop/temp/'
# read in data
data <- read.csv(paste(folder, 'data_for_rich2.csv', sep =''))
attach(data)
data2 <-
ddply(data, .(wheat_rice_both, year), summarize, mean = mean(normalized_violence, na.rm=TRUE))
data2.1 <- subset(data, !is.na(data$wheat_rice_both))
data2.1 <- ddply(data2.1, .(year), summarize, mean = mean(normalized_violence, na.rm=TRUE))
data2.1$wheat_rice_both <- 'All (not NA)'
data2 <- rbind(data2, data2.1)
data2 <- subset(data2, data2$year<2009)
data2$wheat_rice_both <- ifelse(data2$wheat_rice_both == 1, 'Wheat', data2$wheat_rice_both)
data2$wheat_rice_both <- ifelse(data2$wheat_rice_both == 2, 'Rice', data2$wheat_rice_both)
data2$wheat_rice_both <- ifelse(data2$wheat_rice_both == 3, 'Both', data2$wheat_rice_both)
data2$wheat_rice_both <- ifelse(is.na(data2$wheat_rice_both), 'Missing', data2$wheat_rice_both)
ggplot(data2, aes(x=year, y=mean, color=factor(wheat_rice_both))) +
geom_line(size=2)+
scale_colour_hue(l=50) +
scale_y_continuous('Mean GBV / 1000 Women') +
scale_x_continuous('Year') +
theme(panel.background = element_rect(fill = 'white', colour = 'white'),
strip.background = element_rect(fill = 'white'))
folder <- "/Users/majerus/Desktop/R/intro/data/" # path to folder that holds multiple .csv files
files <- list.files(path=folder, pattern="*.csv")
write.csv(mtcars, '/Users/majerus/Desktop/R/intro/data/cars1.csv', row.names=T)
write.csv(mtcars, '/Users/majerus/Desktop/R/intro/data/cars2.csv', row.names=T)
write.csv(mtcars, '/Users/majerus/Desktop/R/intro/data/cars3.csv', row.names=T)
files <- list.files(path=folder, pattern="*.csv")
folder <- "/Users/majerus/Desktop/R/intro/data/"  # path to folder that holds multiple .csv files
files <- list.files(path=folder, pattern="*.csv") # create list of all .csv files in folder
for(file in files){
perpos <- which(strsplit(file, "")[[1]]==".")
assign(
gsub(" ","",substr(file, 1, perpos-1)),
read.csv(paste(path,file,sep="")))
}
folder <- "/Users/majerus/Desktop/R/intro/data/"  # path to folder that holds multiple .csv files
files <- list.files(path=folder, pattern="*.csv") # create list of all .csv files in folder
for(file in files){
perpos <- which(strsplit(file, "")[[1]]==".")
assign(
gsub(" ","",substr(file, 1, perpos-1)),
read.csv(paste(folder,file,sep="")))
}
perpos <- which(strsplit(file, "")[[1]]==".")
temp = list.files(path=folder, pattern="*.csv")
folder <- "/Users/majerus/Desktop/R/intro/data/"  # path to folder that holds multiple .csv files
temp = list.files(path=folder, pattern="*.csv")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
for (i in 1:length(temp)) assign(temp[i], read.csv(paste(folder, temp[i], sep='')))
folder <- "/Users/majerus/Desktop/R/intro/data/"      # path to folder that holds multiple .csv files
file_list <- list.files(path=folder, pattern="*.csv") # create list of all .csv files in folder
for (i in 1:length(file_list)){
assign(file_list[i],
read.csv(paste(folder, file_list[i], sep='')))
}
View(cars1.csv)
folder <- "/Users/majerus/Desktop/R/intro/data/"      # path to folder that holds multiple .csv files
file_list <- list.files(path=folder, pattern="*.csv") # create list of all .csv files in folder
# read in each .csv file in file_list and create a data frame with the same name as the .csv file
data <-
do.call("rbind", lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE)))
folder <- "/Users/majerus/Desktop/R/intro/data/"      # path to folder that holds multiple .csv files
file_list <- list.files(path=folder, pattern="*.csv") # create list of all .csv files in folder
# read in each .csv file in file_list and create a data frame with the same name as the .csv file
data <-
do.call("rbind", lapply(file_list, function(x) read.csv(x, stringsAsFactors = FALSE)))
folder <- "/Users/majerus/Desktop/R/intro/data/"      # path to folder that holds multiple .csv files
file_list <- list.files(path=folder, pattern="*.csv") # create list of all .csv files in folder
# read in each .csv file in file_list and create a data frame with the same name as the .csv file
data <-
do.call("rbind", lapply(file_list, function(x) read.csv(paste(folder, x, sep=''), stringsAsFactors = FALSE)))
View(data)
data(mtcars)
write.csv(mtcars, '/Users/majerus/Desktop/R/intro/data/cars.csv', row.names=T)
mtcars
summary(mtcars)
print(xtable(head(mtcars)),type='html')
library(plyr)
summary_data <- ddply(mtcars, .(cyl), summarise, mean_mpg = mean(mpg))
View(summary_data)
cars <- mtcars
cars <- mtcars
if(require(devtools)) install.packages("devtools")
install.packages("devtools")
devtools::install_github("analytixware/shinysky")
libary(shinysky)
library(shinysky)
shiny::runApp('Desktop/R/shiny/regression')
shinysky::run.shinysky.example()
shinysky::run.shinysky.example()
shiny::runApp('Desktop/R/shiny/regression')
shiny::runApp()
shiny::runApp()
shinysky::run.shinysky.example()
shiny::runApp()
shiny::runApp()
shinysky::run.shinysky.example()
shiny::runApp()
shiny::runApp()
library(shiny)
library(shinyTable)
install_github("shinyTable", "trestletech")
library(devtools)
install_github("shinyTable", "trestletech")
library(shinyTable)
runApp(system.file("examples/01-simple", package="shinyTable"))
runApp(list(
ui = bootstrapPage(
htable( "tbl", clickId="tblClick", headers="provided", readOnly = 'false')
),
server = function(input, output) {
output$tbl <- renderHtable({
if( is.null( input$tbl ) ){
return( data.frame( select = TRUE, value = 1:10  ) )
}
})
}
))
runApp(list(
ui = bootstrapPage(
htable( "tbl", clickId="tblClick", headers="provided", readOnly = 'false')
),
server = function(input, output) {
output$tbl <- renderHtable({
if( is.null( input$tbl ) ){
return( data.frame( select = TRUE, value = 1:10  ) )
}
})
}
))
shiny::runApp('~/Desktop/test')
shiny::runApp('~/Desktop/test')
shiny::runApp('~/Desktop/test')
shiny::runApp()
mtcars[,1]
shiny::runApp()
library(shinyTable)
shiny::runApp(list(
ui=pageWithSidebar(
headerPanel('Simple matrixInput')
,
sidebarPanel(
htable("tbl")
,
submitButton("OK")
)
,
mainPanel(
tableOutput(outputId = 'table.output')
))
,
server=function(input, output){
output$table.output <- renderTable({
input$tbl^2
}
, sanitize.text.function = function(x) x
)
}
))
library(shinyTable)
library(xtable)
shiny::runApp(list(
ui=pageWithSidebar(
headerPanel('Simple matrixInput')
,
sidebarPanel(
htable("tbl")
,
submitButton("OK")
)
,
mainPanel(
tableOutput(outputId = 'table.output')
))
,
server=function(input, output){
output$table.output <- renderTable({
input$tbl^2
}
, sanitize.text.function = function(x) x
)
}
))
library(shinyTable)
library(xtable)
shiny::runApp(list(
ui=pageWithSidebar(
headerPanel('Simple matrixInput')
,
sidebarPanel(
htable("tbl")
,
submitButton("OK")
)
,
mainPanel(
tableOutput(outputId = 'table.output')
))
,
server=function(input, output){
output$table.output <- renderTable({
input$tbl^2
}
, sanitize.text.function = function(x) x
)
}
))
library(shinyTable)
library(xtable)
shiny::runApp(list(
ui=pageWithSidebar(
headerPanel('Simple matrixInput')
,
sidebarPanel(
htable("tbl")
,
submitButton("OK")
)
,
mainPanel(
tableOutput(outputId = 'table.output')
))
,
server=function(input, output){
output$table.output <- renderTable({
input$tbl
}
, sanitize.text.function = function(x) x
)
}
))
library(shinyTable)
library(xtable)
shiny::runApp(list(
ui=pageWithSidebar(
headerPanel('Simple matrixInput')
,
sidebarPanel(
htable("tbl")
,
submitButton("OK")
)
,
mainPanel(
tableOutput(outputId = 'table.output')
))
,
server=function(input, output){
output$table.output <- renderTable({
input$tbl
}
#, sanitize.text.function = function(x) x
)
}
))
library(shiny)
library(shinyTable)
server <- function(input, output, session) {
rv <- reactiveValues(cachedTbl = NULL)
output$tbl <- renderHtable({
if (is.null(input$tbl)){
#fill table with 0
tbl <- matrix(0, nrow=3, ncol=3)
rv$cachedTbl <<- tbl
print(tbl)
return(tbl)
} else{
rv$cachedTbl <<- input$tbl
print(input$tbl)
return(input$tbl)
}
})
output$tblNonEdit <- renderTable({
rv$cachedTbl
})
}
ui <- shinyUI(pageWithSidebar(
headerPanel("Simple Shiny Table!"),
sidebarPanel(
helpText(HTML("A simple editable matrix with an update button.
Shows that only most recent change is saved.
<p>Created using <a href = \"http://github.com/trestletech/shinyTable\">shinyTable</a>."))
),
# Show the simple table
mainPanel(
#editable table
htable("tbl"),
#update button
submitButton("apply table edits"),
#to show saved edits
tableOutput("tblNonEdit")
)
))
shinyApp(ui = ui, server = server)
library(shiny)
library(shinyTable)
server <- function(input, output, session) {
rv <- reactiveValues(cachedTbl = NULL)
output$tbl <- renderHtable({
if (is.null(input$tbl)){
#fill table with 0
tbl <- matrix(0, nrow=3, ncol=3)
rv$cachedTbl <<- tbl
return(tbl)
} else{
rv$cachedTbl <<- input$tbl
return(input$tbl)
}
})
output$tblNonEdit <- renderTable({
#add dependence on button
input$actionButtonID
#isolate the cached table so it only responds when the button is pressed
isolate({
rv$cachedTbl
})
})
}
ui <- shinyUI(pageWithSidebar(
headerPanel("shinyTable with actionButton to apply changes"),
sidebarPanel(
helpText(HTML("A simple editable matrix with a functioning update button.
Using actionButton not submitButton.
Make changes to the upper table, press the button and they will appear in the lower.
<p>Created using <a href = \"http://github.com/trestletech/shinyTable\">shinyTable</a>."))
),
# Show the simple table
mainPanel(
#editable table
htable("tbl"),
#update button
actionButton("actionButtonID","apply table edits"),
#to show saved edits
tableOutput("tblNonEdit")
)
))
shinyApp(ui = ui, server = server)
library(shiny)
runApp(list(
ui=pageWithSidebar(headerPanel("Adding entries to table"),
sidebarPanel(textInput("text1", "Column 1"),
textInput("text2", "Column 2"),
actionButton("update", "Update Table")),
mainPanel(tableOutput("table1"))),
server=function(input, output, session) {
values <- reactiveValues()
values$df <- data.frame(Column1 = NA, Column2 = NA)
newEntry <- observe({
if(input$update > 0) {
newLine <- isolate(c(input$text1, input$text2))
isolate(values$df <- rbind(values$df, newLine))
}
})
output$table1 <- renderTable({values$df})
}))
shiny::runApp()
library(shiny)
library(shinyTable)
server <- function(input, output, session) {
rv <- reactiveValues(cachedTbl = NULL)
output$tbl <- renderHtable({
if (is.null(input$tbl)){
#fill table with 0
tbl <- matrix(0, nrow=3, ncol=3)
rv$cachedTbl <<- tbl
return(tbl)
} else{
rv$cachedTbl <<- input$tbl
return(input$tbl)
}
})
output$tblNonEdit <- renderTable({
#add dependence on button
input$actionButtonID
#isolate the cached table so it only responds when the button is pressed
isolate({
rv$cachedTbl
})
})
}
ui <- shinyUI(pageWithSidebar(
headerPanel("shinyTable with actionButton to apply changes"),
sidebarPanel(
helpText(HTML("A simple editable matrix with a functioning update button.
Using actionButton not submitButton.
Make changes to the upper table, press the button and they will appear in the lower.
<p>Created using <a href = \"http://github.com/trestletech/shinyTable\">shinyTable</a>."))
),
# Show the simple table
mainPanel(
#editable table
htable("tbl"),
#update button
actionButton("actionButtonID","apply table edits"),
#to show saved edits
tableOutput("tblNonEdit")
)
))
shinyApp(ui = ui, server = server)
library(shiny)
runApp(list(
ui=pageWithSidebar(headerPanel("Adding entries to table"),
sidebarPanel(textInput("text1", "Column 1"),
textInput("text2", "Column 2"),
actionButton("update", "Update Table")),
mainPanel(tableOutput("table1"))),
server=function(input, output, session) {
values <- reactiveValues()
values$df <- data.frame(Column1 = NA, Column2 = NA)
newEntry <- observe({
if(input$update > 0) {
newLine <- isolate(c(input$text1, input$text2))
isolate(values$df <- rbind(values$df, newLine))
}
})
output$table1 <- renderTable({values$df})
}))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
matrix(NA, nrow=15, ncol=3)
data.frame(5, 6)
data.frame(c(5, 6))
shiny::runApp()
data.frame(Column1 = numeric(0), Column2 = numeric(0), Column3 = numeric(0))
data.frame(Column1 = numeric(1), Column2 = numeric(1), Column3 = numeric(1))
data.frame(Column1 = numeric(5), Column2 = numeric(5), Column3 = numeric(5))
shiny::runApp()
library(shinyapps)
deployApp("/Users/majerus/Desktop/R/shiny/regression/")
shiny::runApp('~/Desktop/R/chemistry/example_app')
shiny::runApp('~/Desktop/R/chemistry/example_app')
shiny::runApp('~/Desktop/R/chemistry/example_app')
shiny::runApp('~/Desktop/R/chemistry/example_app')
shiny::runApp('~/Desktop/R/chemistry/example_app')
shiny::runApp('~/Desktop/R/chemistry/example_app')
shiny::runApp('~/Desktop/R/chemistry/example_app')
shiny::runApp('~/Desktop/R/chemistry/example_app')
shiny::runApp('~/Desktop/R/chemistry/example_app')
shiny::runApp('~/Desktop/R/chemistry/example_app')
shiny::runApp('~/Desktop/R/chemistry/example_app')
shiny::runApp('~/Desktop/R/chemistry/example_app')
?melt
??melt
shiny::runApp('~/Desktop/R/chemistry/example_app')
